#pragma kernel CSMain

RWStructuredBuffer<float> Result;

[numthreads(1,1,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    uint width = 128;
    uint height = 512;

    int current = width * id.y + id.x;
    float currentValue = Result[current];
    if (currentValue > 1000.0f || currentValue < 0.01f) {
        return;
    }

    float maxDelta = 0.01f;
    float threshold = 0.0f;

    float delta = 0.0f;

    float topDelta = 0.0f;
    if (id.y > 0) {
        float v = Result[current - width];
        if ((v - currentValue) < threshold) {
            topDelta = min(maxDelta, currentValue - v);
            delta += topDelta;
        }
    }

    float bottomDelta = 0.0f;
    if (id.y < height) {
        float v = Result[current + width];
        if ((v - currentValue) < threshold) {
            bottomDelta = min(maxDelta, currentValue - v);
            delta += bottomDelta;
        }
    }

    float leftDelta = 0.0f;
    if (id.x > 0) {
        float v = Result[current - 1];
        if ((v - currentValue) < threshold) {
            leftDelta = min(maxDelta, currentValue - v) * 0.25f * 0.25f;
            delta += leftDelta;
        }
    }

    float rightDelta = 0.0f;
    if (id.x < width) {
        float v = Result[current + 1];
        if ((v - currentValue) < threshold) {
            rightDelta = min(maxDelta, currentValue - v) * 0.25f * 0.25f;
            delta += rightDelta;
        }
    }

    if (delta < 0.01f) {
        return;
    }

    topDelta /= delta;
    bottomDelta /= delta;
    leftDelta /= delta;
    rightDelta /= delta;

    delta = min(delta, maxDelta) * currentValue;

    topDelta *= delta;
    bottomDelta *= delta;
    leftDelta *= delta;
    rightDelta *= delta;

    Result[current - width] += topDelta;
    Result[current + width] += bottomDelta;
    Result[current - 1] += leftDelta;
    Result[current + 1] += rightDelta;
    Result[current] = max(currentValue - delta, 0.0f);
}
